============================= test session starts =============================
platform win32 -- Python 3.11.3, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- D:\Dev\api_yamdb\venv\Scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: D:\Dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 77 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  2%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0] PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data1-messege1] PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2] PASSED [  6%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0] PASSED [ 10%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1] PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2] PASSED [ 12%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3] PASSED [ 14%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4] PASSED [ 15%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [ 16%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 18%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 19%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user PASSED [ 20%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 23%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 25%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 27%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 29%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests PASSED [ 31%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-] PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser PASSED [ 36%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 38%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 40%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 42%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed PASSED [ 44%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 46%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 48%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_09_users_me_get PASSED       [ 50%]
tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed PASSED [ 51%]
tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch PASSED  [ 53%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0] PASSED [ 54%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1] PASSED [ 55%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2] PASSED [ 57%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3] PASSED [ 58%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4] PASSED [ 59%]
tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed PASSED [ 61%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user PASSED [ 63%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 66%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 67%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin PASSED [ 68%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin PASSED [ 70%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 72%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 74%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 76%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete PASSED     [ 77%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission PASSED [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 80%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation PASSED [ 84%]
tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission PASSED [ 85%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 87%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post FAILED     [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get FAILED [ 89%]
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user FAILED [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 93%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get FAILED [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete FAILED [ 97%]
tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth FAILED [100%]

================================== FAILURES ===================================
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000026A0B4A04D0>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0B4623D0>
client = <django.test.client.Client object at 0x0000026A0B463750>

    def test_02_title_admin(self, admin_client, client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        url = '/api/v1/titles/'
        title_count = 0
    
        assert_msg = (
            f'Если POST-запрос администратора к `{url}` '
            'содержит некорректные данные - должен вернуться ответ со '
            'статусом 400.'
        )
        data = {}
        response = admin_client.post(url, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        invalid_data = {
            'name': 'Угнать за 60 секунд',
            'year': 'дветыщи',
            'genre': [genres[1]['slug']],
            'category': categories[1]['slug'],
            'description': 'Угонял машины всю ночь и немного подустал.'
        }
        response = admin_client.post(url, data=invalid_data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        post_data_1 = {
            'name': 'Мост через реку Квай',
            'year': 1957,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'Рон Свонсон рекомендует.'
        }
        response = admin_client.post(url, data=post_data_1)
        assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос администратора к `{url}` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
        title_count += 1
    
        post_data_2 = {
            'name': 'Хороший, плохой, злой.',
            'year': 1966,
            'genre': [genres[2]['slug']],
            'category': categories[1]['slug'],
            'description': 'Угадай ревьюера по названию фильма.'
        }
        response = admin_client.post(url, data=post_data_2)
        assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос администратора к `{url}` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
        title_count += 1
        assert isinstance(response.json().get('id'), int), (
            f'Проверьте, при POST-запросе администратора к `{url}` '
            'в ответе возвращаются данные созданного объекта. Сейчас поле '
            '`id` отсутствует или не является целым числом.'
        )
    
        response = client.get(url)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос неавторизованного пользователя к '
            f'`{url}` возвращает ответ со статусом 200.'
        )
        data = response.json()
        check_pagination(url, data, title_count)
    
        expected_title_names = {post_data_1['name'], post_data_2['name']}
        title_names = {element.get('name') for element in data['results']}
        assert len(expected_title_names.intersection(title_names)) == 2, (
            f'Проверьте, что для эндпоинта `{url}` настроена пагинация. '
            'Сейчас значение параметра `results` отсутствует или содержит '
            'некорректную информацию о существующих объектах.'
        )
    
        for element in data['results']:
            if element['name'] == post_data_1['name']:
                title = element
    
>       assert title.get('rating') is None, (
            'Проверьте, что при GET-запросе неавторизованного '
            f'пользователя к `{url}` возвращается информация о рейтинге '
            'произведений. Если отзывов о произведении нет - значением '
            'поля `rating` должено быть `None`.'
        )
E       AssertionError: Проверьте, что при GET-запросе неавторизованного пользователя к `/api/v1/titles/` возвращается информация о рейтинге произведений. Если отзывов о произведении нет - значением поля `rating` должено быть `None`.
E       assert 0 is None
E        +  where 0 = <built-in method get of dict object at 0x0000026A0B49A8C0>('rating')
E        +    where <built-in method get of dict object at 0x0000026A0B49A8C0> = {'category': {'name': 'Фильм', 'slug': 'films'}, 'description': 'Рон Свонсон рекомендует.', 'genre': [{'name': 'Ужасы', 'slug': 'horror'}, {'name': 'Комедия', 'slug': 'comedy'}], 'id': 1, ...}.get

tests\test_04_title.py:103: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000026A0AC82E50>
client = <django.test.client.Client object at 0x0000026A0AD64950>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0AC83190>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0AD65F10>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0AD66E90>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_01_review_not_auth(self, client, admin_client, admin, user_client,
                                user, moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0AC83190>
title_id = 8, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/8/reviews/
_____________________ Test05ReviewAPI.test_02_review_post _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000026A0AD683D0>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0AD59850>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B3BD650>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B497650>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>

    def test_02_review_post(self, admin_client, user_client,
                            moderator_client, admin):
        titles, _, _ = create_titles(admin_client)
        title_0_reviews_count = 0
    
        data = {}
        response = user_client.post(
            f'/api/v1/titles/{titles[0]["id"]}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит некорректные '
            'данные - должен вернуться ответ со статусом 400.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит некорректные данные - должен вернуться ответ со статусом 400.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_05_review.py:71: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/10/reviews/
__________________ Test05ReviewAPI.test_03_review_detail_get __________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000026A0ACD9950>
client = <django.test.client.Client object at 0x0000026A0AD88410>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0AD8A150>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user = <CustomUser: TestUser testuser@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B461650>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B461CD0>

    def test_03_review_detail_get(self, client, admin_client, admin, user,
                                  user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0AD8A150>
title_id = 12, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/12/reviews/
_________________ Test05ReviewAPI.test_04_review_detail_user __________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000026A0B476490>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0B522F90>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user = <CustomUser: TestUser testuser@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0ACE5110>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0ACE6050>

    def test_04_review_detail_user(self, admin_client, admin, user,
                                   user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0B522F90>
title_id = 14, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/14/reviews/
_________ Test05ReviewAPI.test_05_reviews_detail_moderator_and_admin __________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000026A0B46A990>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0B3BBF10>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B39C410>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B39FED0>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_05_reviews_detail_moderator_and_admin(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        url_template = '/api/v1/titles/{title_id}/reviews/{review_id}/'
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0B3BBF10>
title_id = 16, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/16/reviews/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000026A0B3672D0>
client = <django.test.client.Client object at 0x0000026A0AD70090>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0AD73210>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B51ABD0>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B51BB10>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_01_comment_not_auth(self, client, admin_client, admin,
                                 user_client, user, moderator_client,
                                 moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_06_comment.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0AD73210>
title_id = 18, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/18/reviews/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000026A0AD43490>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0B475550>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B52EA90>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B52E990>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_02_comment(self, admin_client, admin, user_client, user,
                        moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_06_comment.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0B475550>
title_id = 20, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/20/reviews/
_________________ Test06CommentAPI.test_03_comment_detail_get _________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000026A0B348850>
client = <django.test.client.Client object at 0x0000026A0B4125D0>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0B51B450>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B4B07D0>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B4B25D0>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_03_comment_detail_get(self, client, admin_client, admin,
                                   user_client, user, moderator_client,
                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0B51B450>
title_id = 22, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/22/reviews/
_________ Test06CommentAPI.test_04_comment_detail__user_patch_delete __________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000026A0AD98850>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0ACE6050>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B4A5DD0>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B4A4B50>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_04_comment_detail__user_patch_delete(self, admin_client, admin,
                                                  user_client, user,
                                                  moderator_client,
                                                  moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0ACE6050>
title_id = 24, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/24/reviews/
_________ Test06CommentAPI.test_05_comment_detail_admin_and_moderator _________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000026A0ACF0990>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0AD64190>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
user_client = <rest_framework.test.APIClient object at 0x0000026A0AEC8290>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B43EC90>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_05_comment_detail_admin_and_moderator(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0AD64190>
title_id = 26, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/26/reviews/
______________ Test06CommentAPI.test_06_comment_detail_not_auth _______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000026A0ACBDD10>
admin_client = <rest_framework.test.APIClient object at 0x0000026A0B406050>
admin = <CustomUser: TestAdmin testadmin@yamdb.fake>
client = <django.test.client.Client object at 0x0000026A0B4C79D0>
user_client = <rest_framework.test.APIClient object at 0x0000026A0B4C66D0>
user = <CustomUser: TestUser testuser@yamdb.fake>
moderator_client = <rest_framework.test.APIClient object at 0x0000026A0B3E1BD0>
moderator = <CustomUser: TestModerator testmoder@yamdb.fake>

    def test_06_comment_detail_not_auth(self, admin_client, admin, client,
                                        user_client, user, moderator_client,
                                        moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:252: in create_reviews
    response = create_single_review(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000026A0B406050>
title_id = 28, text = 'review number 1', score = 5

    def create_single_review(client, title_id, text, score):
        data = {'text': text, 'score': score}
        response = client.post(
            f'/api/v1/titles/{title_id}/reviews/', data=data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос авторизованного пользователя к '
            '`/api/v1/titles/{title_id}/reviews/` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос авторизованного пользователя к `/api/v1/titles/{title_id}/reviews/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:158: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/28/reviews/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
============================== warnings summary ===============================
venv\Lib\site-packages\django\http\request.py:1
  D:\Dev\api_yamdb\venv\Lib\site-packages\django\http\request.py:1: DeprecationWarning: 'cgi' is deprecated and slated for removal in Python 3.13
    import cgi

venv\Lib\site-packages\django\utils\encoding.py:266
  D:\Dev\api_yamdb\venv\Lib\site-packages\django\utils\encoding.py:266: DeprecationWarning: Use setlocale(), getencoding() and getlocale() instead
    encoding = locale.getdefaultlocale()[1] or 'ascii'

tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search
  D:\Dev\api_yamdb\venv\Lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.CustomUser'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail
  D:\Dev\api_yamdb\venv\Lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Title'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - As...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_post - Assert...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get - ...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user
FAILED tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - Assertio...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete
FAILED tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator
FAILED tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth
================== 12 failed, 65 passed, 7 warnings in 8.36s ==================
